doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Social Coding in GitHub

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    link(rel='icon', type='image/png', href='../images/GitHub-Mark-32px.png')
    // endbuild

  body
    .container

    article
      section(data-bespoke-state='emphatic')
        <a href="https://github.com/" target="_blank"> <img src="../images/GitHub-Mark-Light-120px-plus.png" alt="Github Logo" /> </a>

      section(data-bespoke-state='emphatic')
        h1 Social Coding in GitHub

      section(data-bespoke-state='emphatic')
        h2 Sejarah GitHub
        p Github didirikan oleh Trio : Chris Wanstrath (@defunkt), Tom Preston-Werner (@mojombo), dan PJ Hyett di tahun 2008. 
        p Bermula dari acara lokal meetup programmer, Tom Preston-Werner dan Chris Wanstrath bertemu dan kemudian membicarakan ide Tom tentang sebuah git hosting. 
        p Ide ini kemudian bergulir dan semakin matang setelah mereka bertemu PJ Hyett dan mempresentasikan ide mereka ini.ditahun 2008, mereka merilis versi pertama dari Github

      section(data-bespoke-state='emphatic')
        h2 Pengertian GitHub
        p Github adalah software hosting untuk proyek open source yang menggunakan Tool System revisi kontrol Git. Dalam bahasa gaul , Github adalah jejaring social untuk software developer.

      section(data-bespoke-state='emphatic')
        h2 Fungsi GitHub
        p Tempat terbaik untuk berbagi kode dengan teman-teman, rekan kerja, teman sekelas, dan orang asing. 
        p Lebih dari dua juta orang menggunakan GitHub untuk membangun hal-hal menakjubkan bersama-sama.

      section(data-bespoke-state='emphatic')
        h2 Manfaat GitHub
        p Dengan fitur kolaboratif GitHub.com, desktop dan aplikasi mobile, dan GitHub Enterprise, belum pernah lebih mudah bagi individu dan tim untuk menulis kode yang lebih baik, lebih cepat.

      section(data-bespoke-state='emphatic')
        h2 Github for Windows
        h4 Cara termuda untuk menggunakan Github di Windows
        h3.bullet <a href="https://github-windows.s3.amazonaws.com/GitHubSetup.exe">Download Github for Windows</a>
        ul
          li Stay in sync
          li Branch with ease
          li Clone with a click

      section(data-bespoke-state='emphatic')
        h2 Kolaborasi di GitHub

        p "GitHub is like Wikipedia for programmers. You can edit files, see who changed what, view old versions of files, and access it from anywhere in the world – except you’re working with source code instead of encyclopedia data. Companies use it to build software and websites, while hobbyist programmers use it to find and share projects."

      section(data-bespoke-state='emphatic')
        h2 Beberapa Step by Step agar kita dapat Akrab dengan GitHub :
        ul
          li
          li 1. Membuat Account baru di GitHub
          li 2. Verifikasi Email
          li 3. Pengaturan SSH
          li 4. Membuat Repository Baru
          li 5. Clone Repository
          li 6. Forking
          li 7. Pull Request
          li 8. Watch
          li 9. Star
          li 10. Follow
          li 11. Bug Tracking

      section(data-bespoke-state='emphatic')
        h2 1. Membuat Account baru di Github
        p Untuk memulai menggunakan Github, terlebih dahulu kita harus membuat account. Arahkan browser ke <a href="https://github.com/">http://github.com</a> dan di halaman depan sudah tersedia form yang mengajak kita untuk Sign Up ke Github Isikan Username anda, Email anda, dan Password, lalu klik tombol Sign Up to Github untuk membuat account Github baru.

      section(data-bespoke-state='emphatic')
        <a href="https://github.com/" target="_blank"> <img src="../images/CaraBuatAccountGitHub.png" width="525" height="250" alt="Fitur Github" /></a>
        p Isikan username, email anda, dan password, lalu klik tombol Sign Up to Github untuk membuat account Github baru.

      section(data-bespoke-state='emphatic')
        h2 2. Verifikasi Email
        p Verifikasi email dibutuhkan terutama untuk mengaktifkan protocol SSH yang akan kita gunakan nantinya untuk melakukan push ke Github. Masuk ke menu Setting, dan pilih options Emails. Kemudian klik tombol Verify. Github akan mengirim anda email verifikasi. Silakan buka inbox email anda kemudian klik link yang disertakan di email tersebut
        <a href="https://github.com/" target="_blank"> <img src="../images/email-verifikasi.png" width="545" height="250" alt="Fitur Github" /></a>

      section(data-bespoke-state='emphatic')
        h2 3. Cara Membuat Repositary Baru
        p Dalam menggunakan Version control, anda akan selalu melakukan Commit pada Git, tempat tersebut dinamakan sebuah repository. Dan untuk menyimpan project yang anda buat pada GitHub, anda perlu memiliki GitHub Repository. Berikut ini adalah cara untuk membuat repository pada GitHub. Click New repository. Selanjutnya masukkan informasi tentang anda. jika sudah di isi, selanjutnya click “Create Repository.” Kalau sudah sampai tahap ini, anda sudah mempunyai repository nya.

        p Github menyediakan dua opsi repostitory. Yaitu public dan private. Public Repository is free sedangkan private berbayar. Kita akan membuat free public repository.

      section(data-bespoke-state='emphatic')
        p Klik tombol New Repository seperti gambar dibawah ini. Kemudian isikan nama repository dan description, terakhir klik tombol Create Repository untuk membuat repo baru di Gihub
        <img src="../images/new-repo.png" width="500" height="220" alt="Fitur Github" />

       section(data-bespoke-state='emphatic')
        <img src="../images/new-repo-2.png" />

       section(data-bespoke-state='emphatic')
        p Jika berhasil anda akan menuju ke halaman seperti dibawah ini
        <img src="../images/new-repo-3.png" width="500" height="300" />

      section(data-bespoke-state='emphatic')
        h2 4. Pengaturan SSH
        p Github menyediakan 2 cara umum untuk melakukan koneksi ke repository kita. Yaitu dengan protocol https dan SSH. Memakai protocol SSH lebih aman dan nyaman karena kita tidak perlu memasukkan username dan password Github kita tiap kali kita melakukan Push. Untuk mengaktifkan protocol SSH di Github kita, terlebih dahulu kita harus men-setting SSH di komputer lokal kita. Kita generate dulu public key untuk SSH kita
        code.language-javascript
          ~$ ssh-keygen -t rsa -C [email_anda]
        hr
        p Secara default, key SSH akan digenerate di directory /home/user_anda/.ssh. Email anda adalah email yang anda verifikasi di github tadi.

      section(data-bespoke-state='emphatic')
        p Selanjutnya adalah men-setting Git kita. Kita setting nama dan email pada global config Github 
        hr
        code.language-javascript
          ~$ git config --global user.name [nama_anda] 
        code.language-javascript
          ~$ git config --global user.email [email_anda]
        
      section(data-bespoke-state='emphatic')
        p Langkah terakhir adalah mendaftarkan public key ssh kita ke Github. Caranya adalah masuk ke Setting, pilih SSH Keys dan masukkan title beserta isi dari public key SSH kita yaitu isi dari file /home/user/.ssh/id_rsa.pub
        hr
        <img src="../images/ssh-register.png" width="540" height="290" />
        hr
        p Klik tombol Add Key dan masukkan konfirmasi password. Masukkan password Github anda dan tekan enter.

      section(data-bespoke-state='emphatic')
        p Untuk memastikan apakah kita sudah punya akses SSH ke Github, kita akan coba melakukan koneksi ke Github via SSH
        hr
        code.language-javascript
          ~$ ssh -vT git@github.com
        hr
        p Hi entung! You've successfully authenticated, but GitHub does not provide shell access.
        

      section(data-bespoke-state='emphatic')
        h2 5. Clone repository
        p Setelah kita membuat Repository di Github, saatnya kita menambah file ke dalam repository kita tersebut. Supaya mudah, kita clone terlebih dahulu repository kita di Github ke komputer lokal kita. Git adalah Distributed Version Control System, distributed yang dimaksud disini salah satunya adalah distributed repository. Oleh karena itu, untuk mengambil file di server, kita tidak melakukan checkout seperti di Subversion, tapi kita meng-clone (menggandakan) repo di server ke komputer lokal kita. Sehingga kita akan mempunyai dua repository nantinya, yaitu repository di server dan repository di komputer lokal.
      
      section(data-bespoke-state='emphatic')
        p Kita dapat mengclone melalui protocol https atau SSH. Di artikel sebelumnya kita sudah men-setting SSH key kita di Github, dan kita akan menggunakannya untuk meng-clone repository. Rumusnya sederhana, yaitu git clone [url repository]. URL repository dapat kita ambil di halaman repository kita di Github. Lihat gambar dibawah ini 
        hr
        <img src="../images/url-clone.png" width="540" height="250" />
        hr
        code.language-javascript
          ~$ git@github.com:glendmaatita/Tolkien.git
        hr
        p Git akan meng-clone repo kita di Github ke directory dimana perintah diatas dijalankan. Jika kita menjalankan perintah git remote -v Git akan memberitahu URL dari remote repository kita
      section(data-bespoke-state='emphatic')
        h2 6. Forking
        p Forking adalah murni fitur dari Github. Fitur ini tidak terdapat pada Git. Forking digunakan untuk meng-clone suatu repository milik suatu akun github ke dalam account kita. 
        p Jadi, saat kita melakukan forking, sejatinya kita melakukan git clone ke suatu repository di Github dan meletakkan clone repository tersebut ke dalam account kita di Github. 
        p Setelah melakukan forking, kita bisa memperlakukan repository hasil forking tersebut selayaknya repository kita sendiri. Kita bisa mengupdate, menambah, atau menghapus file.

      section(data-bespoke-state='emphatic')
        p Untuk melakukan forking, kita tinggal membuka suatu repository project dan mengklik tombol Forking. Perhatikan gambar dibawah ini :
        <a href="https://github.com/" target="_blank"> <img src="../images/Forking1.png" width="525" height="250" alt="Fitur Github" /></a>

      section(data-bespoke-state='emphatic')
        p Selanjutnya Github akan otomatis melakukan clone ke account Github anda . Jika proses forking sukses, anda akan melihat repository tersebut di account anda
        <a href="https://github.com/" target="_blank"> <img src="../images/Forking2.png" width="205" height="250" alt="Fitur Github" /></a>
        p Selanjutnya anda dapat memperlakukan repository ini sebagai repository milik anda sendiri. Anda dapat meng-clone ke komputer lokal anda, melakukan modifikasi, dan melakukan push ke Github.


      section(data-bespoke-state='emphatic')
        h2 7. Pull Request
        p Sebelum anda dapat membuka pull request, anda harus membuat cabang di local repository anda, Untuk commit dan push cabang ke repository atau di GitHub.
         ul
           li
           li 1. Kunjungi repository anda untuk di push
           li 2. Klik Compare dan Review dalam Repository
           li 3. Anda akan mengCompare ke halaman. Lalu anda dapat klik edit di bagian atas ( merge ) untuk menggabungkan cabang baru, terus menggunakan Branch
           li 4. Pilih Branch untuk di gabungkan ke cabang lain nya
           li 5. Review perubahan yang telah di ganti
           li 6. Klik untuk membuat Pull Request untuk Compare
           li 7. Ketik judul dan keterangan untuk Pull request anda
           li 8. Klik kirim Pull Request.
        p Setelah permintaan pull request telah ditinjau, lalu bisa bergabung kedalam repository.

      section(data-bespoke-state='emphatic')
        p Pull Request juga merupakan fitur dari Github. Bersama dengan Forking, Pull Request merupakan fitur yang sangat menarik di Github dan merupakan alat bagi Github untuk melakukan misinya, yaitu menghilangkan barrier atau kesulitan saat seseorang ingin berkontribusi ke suatu project (open source). Pull Request tidak dapat dipisahkan dari Forking. 

        p Bayangkan seperti ini : Anda menemukan suatu project open source yang sangat menarik perhatian anda. Anda tentu ingin berkontribusi ke project tersebut. Langkah awal yang akan anda lakukan adalah melakukan Forking, sehingga anda mempunyai clone dari repository project open source tadi di akun Github anda.Langkah selanjutnya adalah anda melakukan clone dari repo yang telah di-fork tadi ke komputer lokal anda sehingga anda dapat menambah, mengedit, atau menghapus file. Inilah yang nantinya akan menjadi kontribusi anda ke project open source tadi. Kemudian anda melakukan commit dan mem-push perubahan tadi ke Github, tentunya ke repo hasil forking anda di Github. Sampai disini, perubahan yang anda buat hanya akan terupdate di repo Github anda. Perubahan belum terjadi di repository asli dari project open source tersebut. Dan langkah terakhir yang harus anda lakukan adalah melakukan Pull Request. 

        p Jadi Pull Request dapat diibaratkan, anda mengirim permintaan agar perubahan kode yang telah anda lakukan di-merge ke dalam repository aslinya. Jika Pull Request anda disetujui, dapat dikatakan anda telah menjadi bagian dari kontributor project open source tadi. Untuk melakukan Pull Request, klik link Pull Request yang ada di halaman repo forking anda

      section(data-bespoke-state='emphatic')
        <img src="../images/pull request 1.png" width="543" height="250">

        p Anda selanjutnya akan dibawa ke halaman compare. Halaman Compare ini akan menampilkan perbedaan repo forking anda sebelum dan sesudah anda modifikasi. Terlihat pada gambar dibawah ini saya mengubah beberapa bagian dari file Readme. Jika anda sudah yakin dengan perubahan yang anda buat klik link dengan blok biru diatas

      section(data-bespoke-state='emphatic')
        <img src="../images/pull request 2.png" width="555" height="270" >
        p Anda akan dibawah ke halaman untuk memberi message di Pull Request anda. Klik link Send pull request untuk mengirim perubahan anda ke repository aslinya

      section(data-bespoke-state='emphatic')
        <img src="../images/pull request 3.png" width="540" height="270" >
        p Dengan begini, perubahan yang anda buat sudah terkirim dan pemilik repository asli dari project tersebut akan mendapatkan notifikasi. Jika Pull Request anda di-approve, otomatis repo aslinya akan terupdate dengan perubahan yang anda buat. Gambar dibawah ini memperlihatkan bahwa pemilik repo mendapat notifikasi tentang pull request

      section(data-bespoke-state='emphatic')
        <img src="../images/pull request 4.png" width="550" height="270">
        p Pemilik Repo asli juga dapat memberikan comment dan melakukan approval terhadap suatu Pull Request dengan mengklik tombol Merge pull request

      section(data-bespoke-state='emphatic')
        <img src="../images/pull request 5.png" width="550" height="270">

      section(data-bespoke-state='emphatic')
        h2 8. Watch
        p Github memberikan kesempatan kepada kita untuk dapat mengikuti perkembangan dan diskusi mengenai Project yang menurut kita menarik. dengan Watch, kita akan selalu mendapat notifikasi dari diskusi dan aktivitas pada suatu repository.
        p Kita dapat menggunakan fitur ini hanya dengan mengklik tombol Watch yang terdapat pada setiap halaman repository.

      section(data-bespoke-state='emphatic')
        <a href="https://github.com/" target="_blank"> <img src="../images/Watch.png" width="525" height="250" alt="Fitur Github" /></a>
        p <font size="1"> Github memberikan 3 Opsi untuk menggunakan fitur ini yaitu Now Watching , Watching , dan Ignoring .</br>1. Watching berarti kita mendapat notifikasi dari semua diskusi yang terjadi. </font>

      section(data-bespoke-state='emphatic')
        <a href="https://github.com/" target="_blank"> <img src="../images/NotWatching.png" width="525" height="250" alt="Fitur Github" /></a>
        p <font size="1"> 2. Not Watching berarti kita hanya dapat mendapat notifikasi hanya pada diskusi dimana kita mendapat mention. </font>

      section(data-bespoke-state='emphatic')
        <a href="https://github.com/" target="_blank"> <img src="../images/Ignoring.png" width="525" height="250" alt="Fitur Github" /></a>
        p <font size="1"> 3. Ignoring berarti kita tidak akan mendapat notifikasi apapun bahkan ketika di-mentions </font>

      section(data-bespoke-state='emphatic')
        h2 9. Star
        p Fitur ini hampir sama dengan Watch. Hanya saja, notifikasi dari Star tidak akan dimunculkan di halaman news feed akun kita. Untuk menggunakan fitur ini, masuklah ke halaman suatu repository dan klik Star.
        <img src="../images/star.png" width="550" height="270"/>

      section(data-bespoke-state='emphatic')
        h2 10. Follow
        p Mirip seperti Twitter, kita juga dapat mem-follow user Github untuk mendapatkan notifikasi mengenai aktivitas mereka di Github. untuk menggunakan fitur ini, kunjungi halaman seorang user github dan klik tombol Follow.
        <img src="../images/follow.png" width="530" height="270"/>

      section(data-bespoke-state='emphatic')
        h2 11. Bug Tracking
        p Github juga dilengkapi dengan fitur Bug Tracking untuk me-manage issue. Hal ini menjadi sebuah keuntungan tersendiri, karena selain sebagai tempat meng-host project kita,

        p Github juga memberikan fitur bug tracker sebagai tempat user atau kolaborator melaporkan bug/issue. Selain itu, Bug Tracker tidak hanya berisi tentang laporan bug, juga sebagai tempat untuk request fitur. Kita dapat berkontribusi dalam suatu project dengan melihat daftar issue dan menyelesaikan apa yang kita rasa dapat kita lakukan.

        p Untuk melihat daftar issue, klik link Issues pada suatu halaman repository project dan anda akan dibawa ke halaman list issue.

      section(data-bespoke-state='emphatic')
        <img src="../images/bugtrack1.png" width="520" height="300">
        
      section(data-bespoke-state='emphatic')
        <img src="../images/bugtrack2.png" width="520" height="300">

      section(data-bespoke-state='emphatic')
        p Dapat kita lihat pada gambar diatas. Disana terdapat sub menu Open dan Closed. Open berisi daftar issues yang belum solved sedangkan Close berarti daftar issue yang sudah solved. Kita dapat berkontribusi dengan menyelesaikan issue yang masih Open. Selain itu, kita juga dapat menambah Issue seperti pada Gambar dibawah ini
        <img src="../images/bugtrack3.png" width="550" height="300">

      section(data-bespoke-state='emphatic')
        p Ataupun menjawab dan berdiskusi di suatu Issue Report dengan mengklik salah satu issue di daftar issue
        <img src="../images/bugtrack4.png" width="550" height="300">

      section(data-bespoke-state='emphatic')

        h2 Cara Install SourceTree
        p <font size="1"> Buka Installernya , kemudian </font>
        ul
          li <font size="1"> -Klik Next , kemudian </font>
          li <font size="1"> -Browse / Letakkan ke tempat yang ingin anda simpan. misalnya = C:\Program Files (x86)\SourceTree\ </font>
          li <font size="1"> -Klik Next </font>
          li <font size="1"> -Install </font>
          li <font size="1"> -Klik Finish </font>

          li <font size="1"> -kemudian akan kebuka softwarenya </font>
          li <font size="1"> -Sebelumnya pastikan anda sudah terinstall Git </font>
          li <font size="1"> -Install Mercurial </font>
          li <font size="1"> -Masukkan Full Name dan Email Address anda </font>
          li <font size="1"> -Centang "Agree" </font> 
          li <font size="1"> -Klik Next </font>
          li <font size="1"> -Klik Use Putty/Plink , Klik Next </font>
          li <font size="1"> -Masukkan Username dan Password GitHub anda </font>
          li <font size="1"> -Finish </font>

      section(data-bespoke-state='emphatic')
        h2 <font size="4"> Cara Kedua Dalam Clone Repository bisa menggunakan SourceTree. Berikut Step By Step Menggunakan Sourcetree :</font>
        ul
          li 1. Download Sourcetree
          li 2. Install Sourcetree
          li 3. Cara Clone 
          li 4. Cara Pull 
          li 5. cara push 
          li 6. cara merge
          li 7. cara commit
          li 8. cara push dengan terminal
        
      section(data-bespoke-state='emphatic')
        h2 Download sourcetree
        p Cara mendownload SourceTree mudah saja kita bisa langsung ke alamat websitenya yaitu "http://www.sourcetreeapp.com/" Copy paste link tersebut ke browse dan download sesuai OS kita sendiri

      section(data-bespoke-state='emphatic')
        h2 Cara Clone Repository di Source Tree
        ul
          li 1. Install Source Tree
          li 2. Klik Clone/New
          li 3. isi link repository di Source path/URL
          li 4. Pastikan link tersebut mempunyai folder repository
          li 5. Untuk mencari folder repository sesuai yang kita simpan seperti (Computer/Local Disk(D:)/project-tkppl)

      section(data-bespoke-state='emphatic')
        h2 Cara Pull di Source Tree
        hr
        <img src="../images/Pull.png" width="510" height="285" />

      section(data-bespoke-state='emphatic')
        h2 Cara Push di Source Tree
        p Berikut ini adalah cara Push di SourceTree:
        ul 
          li 1. Pilih tab commit
          li 2. Pindahkan file yang akan di commit ke "staged Changes"
          li 3. Pada commit message, isikan apa saja yang anda lakukan di project anda yang sudah di pindahkan ke Staged Changes
          li 4. Lalu klik Commit

      section(data-bespoke-state='emphatic')
        h2 Cara Merge
        p Jika anda bekerja dalam sebuah tim, ada saatnya anda dan rekan anda akan mengubah suatu berkas secara bersamaan. Misalnya pada skenario berikut, yang sering terjadi:
        ul
        li Jika anda bekerja dalam sebuah tim, ada saatnya anda dan rekan anda akan mengubah suatu berkas secara bersamaan. Misalnya pada skenario berikut, yang sering terjadi:
        li Sebelum anda selesai membuat perubahan, rekan anda juga melakukan perubahan pada berkas konfigurasi tersebut. Tetapi karena perubahan yang dilakukan rekan hanya sedikit, dianya bisa langsung mengirimkan perubahan tersebut ke server sebelum anda;
        li Sekarang saat anda mau mengirimkan perubahan yang anda lakukan akan muncul konflik dimana berkas dasar yang anda ubah bukan lagi berkas yang ada di server, karena sudah diubah oleh rekan anda;
        li Karena Git tidak cukup cerdas untuk menggabungkan perubahan-perubahan ini maka Git akan akan menyerahkan tugas ini ke anda. Dimana Git akan: menggagalkan proses push anda dengan menampilkan pesan konflik, meminta anda untuk melakukan proses merge (=penggabungan), dan selesai digabungkan baru dicoba untuk di-push lagi.


      section(data-bespoke-state='emphatic')
        p Pesan konflik yang muncul saat anda push, kira-kira, akan seperti ini:
        <a href="https://github.com/" target="_blank"> <img src="../images/merge.png" width="405" height="120" alt="Fitur Github" /></a>
        p Disini Git meminta anda untuk pull (=menarik) versi paling terkini dari server, gabungkan dengan perubahan yang anda lakukan, dan push hasil penggabungan ini. 
        p Perhatikan pada saat anda melakukan proses pull, Git akan memberikan pesan kesalahan konflik lagi tetapi sekarang seperti ini:
        <a href="https://github.com/" target="_blank"> <img src="../images/merge1.png" width="405" height="120" alt="Fitur Github" /></a>

      section(data-bespoke-state='emphatic')
        p Dimana Git berusaha untuk menggabungkan berkas anda secara otomatis (=Auto-merging) tetapi gagal dan meminta anda untuk melakukannya. Untuk menandai mana saja yang menjadi masalah, Git akan menandai, pada berkas yang bermasalah, baris-baris yang mengalami konflik. Tandanya kira-kira seperti ini: 
        <a href="https://github.com/" target="_blank"> <img src="../images/merge2.png" width="405" height="120" alt="Fitur Github" /></a>
        p Perhatikan berkas asli anda tidak hilang dan akan disimpan dengan nama yang sama tetapi diberi akhiran .orig.

        p Cara paling mudah melakukan penggabungan ya langsung diubah berkas ini dan di-push lagi. 
         
      section(data-bespoke-state='emphatic')
        h2 Cara Commit di Source Tree
        <a href="#" target="_blank"> <img src="../images/Commit Source Tree.png" width="530" height="270" alt="Commit Source Tree" /></a>

      section(data-bespoke-state='emphatic')
        h2 Cara Push di Terminal
        p Untuk cara push di Terminal : "$ git push origin master", kemudian masukkan Username dan Password akun GitHub. Kemudian jika sudah push juga bisa di cek di link GitHub sendiri. Akan ada tertulis di GitHub bahwa anda telah PUSH.

    footer
      .container
        p.text-muted
          | Copyright © 2014 <a href='https://github.com/tianboyand/project-tkppl'>soGit</a>

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-forms/dist/bespoke-forms.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
    // endbuild
